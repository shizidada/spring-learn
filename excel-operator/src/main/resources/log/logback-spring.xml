<?xml version="1.0" encoding="UTF-8"?>
<!--
scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration>
  <!--
      子节点contextName：用来设置上下文名称，每个logger都关联到 logger 上下文，默认上下文名称为 default。
      定义热更新不允许重命名
  -->
  <contextName>excel-file-operator</contextName>
  <!-- https://www.cnblogs.com/reason-cai/p/6763108.html -->

  <!--
      用来定义变量值的标签，<property> 有两个属性，name 和 value；其中name的值是变量的名称，value的值时变量定义的值。
      通过<property>定义的值会被插入到 logger 上下文中。 定义变量后，可以使“${}”来使用变量。
  -->
  <!--<property name="log.path" value="/Users/taohua/works/Java works/log/logback.log"/>-->
  <!--<property name="APP_Name" value="myAppName" />-->
  <!--<contextName>${APP_Name}</contextName>-->

  <!--子节点timestamp：获取时间戳字符串，他有两个属性key和datePattern-->
  <!--
     key: 标识此timestamp的名字；
　　　　datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。
  -->
  <!--<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>-->
  <!--<contextName>${bySecond}</contextName>-->

  <!--
      子节点appender：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名
  -->

  <!--
      过滤器，这个过滤器是行为过滤器，直接过滤掉了除debug外所有的行为信息
      <filter class="ch.qos.logback.classic.filter.LevelFilter">
          <level>debug</level>
          <onMatch>ACCEPT</onMatch>
          <onMismatch>DENY</onMismatch>
      </filter>
  -->

  <!--
  ConsoleAppender 把日志输出到控制台，有以下子节点：
　　　　　　encoder：对日志进行格式化。
　　　　　　target：字符串System.out(默认)或者 System.err (错误输出)
  -->

  <!--
  FileAppender：把日志添加到文件，有以下子节点：
　　　　　　file：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
　　　　　　append：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
　　　　　　encoder：对记录事件进行格式化。
　　　　　　prudent：如果是 true，日志会被安全的写入文件，
                  即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。
  -->

  <!--
      RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
　　　　　　file：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。

　　　　　　append：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。

　　　　　　rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
                  属性class定义具体的滚动策略类 class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"：
                  最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：

　　　　　  fileNamePattern：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，
                      如：%d{yyyy-MM}。
                      如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，
                              当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；
                      如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“”会被当做目录分隔符。

　　　　　　maxHistory: 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。
                      假设设置每个月滚动，且maxHistory是6，则只保存最近6个月的文件，删除之前的旧文件。
                      注意，删除旧文件是，那些为了归档而创建的目录也会被删除。

　　　　　　class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"：
              查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点:
                  maxFileSize:这是活动文件的大小，默认值是10MB。

　　　　　　prudent：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。

　　　　　　triggeringPolicy : 告知 RollingFileAppender 合适激活滚动。

　　　　　　class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy" 根据固定窗口算法重命名文件的滚动策略。
                  有以下子节点：
      　　　　　　　　minIndex:窗口索引最小值
      　　　　　　　　maxIndex:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。
      　　　　　　　　fileNamePattern:必须包含“%i”例如，假设最小值和最大值分别为1和2，
                                      命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。
                                      还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip
  -->

  <!--
      子节点 logger：用来设置某一个包或具体的某一个类的日志打印级别、以及指定 appender
      logger 仅有一个name属性，一个可选的 level 和一个可选的 addtivity 属性。
      可以包含零个或多个appender-ref元素，标识这个appender将会添加到这个 logger
  　　　　name: 用来指定受此 logger 约束的某一个包或者具体的某一个类。
  　　　　level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，
              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。 如果未设置此属性，
              那么当前 logger 将会继承上级的级别。

         addtivity: 是否向上级 logger 传递打印信息。默认是true。同 logger 一样，可以包含零个或多个 appender-ref 元素，
              标识这个 appender 将会添加到这个 logger。
  -->

  <!--
      子节点 root:它也是 logger 元素，但是它是根 logger,
      是所有 logger 的上级。只有一个 level 属性，因为 name 已经被命名为"root",且已经是最上级了。
  -->

  <!--常用logger配置-->
  <!-- show parameters for hibernate sql 专为 Hibernate 定制 -->
  <!--<logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE" />-->
  <!--<logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="DEBUG" />-->
  <!--<logger name="org.hibernate.SQL" level="DEBUG" />-->
  <!--<logger name="org.hibernate.engine.QueryParameters" level="DEBUG" />-->
  <!--<logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG" />-->

  <!--myibatis log configure-->
  <logger name="com.apache.ibatis" level="TRACE"/>
  <logger name="java.sql.Connection" level="DEBUG"/>
  <logger name="java.sql.Statement" level="DEBUG"/>
  <logger name="java.sql.PreparedStatement" level="DEBUG"/>

  <!-- 导入默认配置-->
  <!--<include resource="org/springframework/boot/logging/logback/defaults.xml"/>-->

  <!-- 默认 defaults.xml 中定义 -->
  <!-- ColorConverter 输出颜色值 -->
  <!--faint red green yellow blue magenta cyan-->
  <conversionRule conversionWord="clr"
      converterClass="org.springframework.boot.logging.logback.ColorConverter"/>

  <conversionRule conversionWord="wex"
      converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>

  <conversionRule conversionWord="wEx"
      converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

  <property name="CONSOLE_LOG_PATTERN"
      value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

  <property name="FILE_LOG_PATTERN"
      value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

  <logger name="org.apache.catalina.startup.DigesterFactory" level="ERROR"/>
  <logger name="org.apache.catalina.util.LifecycleBase" level="ERROR"/>
  <logger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN"/>
  <logger name="org.apache.sshd.common.util.SecurityUtils" level="WARN"/>
  <logger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN"/>
  <logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="ERROR"/>
  <logger name="org.hibernate.validator.internal.util.Version" level="WARN"/>

  <!--输出到控制台-->
  <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>
        ${CONSOLE_LOG_PATTERN}
      </pattern>
    </encoder>
  </appender>

  <root level="INFO">
    <!-- appender 指定 name -->
    <appender-ref ref="console"/>
    <!--<appender-ref ref="file"/>-->
  </root>

  <logger name="org.excel.operator.mapper" level="DEBUG"/>

  <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
  <!--<springProfile name="dev">-->
  <!--<logger name="org.springboot.learnn" level="DUBUG"/>-->
  <!--</springProfile>-->

  <!-- 生产环境. -->
  <!--<springProfile name="pro">-->
  <!--<logger name="org.springboot.learnn" level="INFO"/>-->
  <!--</springProfile>-->

</configuration>